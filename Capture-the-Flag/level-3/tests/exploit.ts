import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Level3 } from "../target/types/level_3";
import * as web3 from "@solana/web3.js";
import { ASSOCIATED_TOKEN_PROGRAM_ID, AuthorityType, createAssociatedTokenAccountInstruction, createInitializeInstruction, createInitializeMetadataPointerInstruction, createInitializeMintInstruction, createMint, createMintToCheckedInstruction, createSetAuthorityInstruction, createUpdateAuthorityInstruction, createUpdateFieldInstruction, ExtensionType, getAssociatedTokenAddressSync, getMint, getMintLen, LENGTH_SIZE, TOKEN_2022_PROGRAM_ID, TYPE_SIZE } from "@solana/spl-token";
import { pack, TokenMetadata } from "@solana/spl-token-metadata";

export const mint = new web3.PublicKey(
  "AsqdvXVEZaSFRNJ5ERSSUL5firH2KBhjP76tsYXB1eKK"
);
export const factionCreator = new web3.PublicKey(
  "4A4cPZgQx2cZ3aejRLCMSX5839gVM3Gjrii2nxfGVwVj"
);
export const faction = new web3.PublicKey(
  "GG9rdMcjKFssQEdyLAeFrPSeZCPcGUBowTpwtGerrggp"
);

// x x x x x x x x x x x x x x x x x x x x x
// | | | | | | | | | | | | | | | | | | | | |
//           ADD SECRETS CODE BELOW
// | | | | | | | | | | | | | | | | | | | | |
// v v v v v v v v v v v v v v v v v v v v v

const SECRET =
  "eecc857933d8929d484d89618dde031e09183e4cc4dbe954a9055070b332983a";

// ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
// | | | | | | | | | | | | | | | | | | | | |
//           ADD SECRETS CODE ABOVE
// | | | | | | | | | | | | | | | | | | | | |
// x x x x x x x x x x x x x x x x x x x x x

describe("level-3", () => {
  const provider = anchor.AnchorProvider.env();

  anchor.setProvider(provider);

  const program = anchor.workspace.Level3 as Program<Level3>;

  const newMember = web3.Keypair.generate();

  // x x x x x x x x x x x x x x x x x x x x x
  // | | | | | | | | | | | | | | | | | | | | |
  //           ADD YOUR CODE BELOW
  // | | | | | | | | | | | | | | | | | | | | |
  // v v v v v v v v v v v v v v v v v v v v v
  const factionCreator = web3.Keypair.generate();
  const mintKeypair = web3.Keypair.generate();
  const [factionAddress] = anchor.web3.PublicKey.findProgramAddressSync(
    [Buffer.from("faction"), factionCreator.publicKey.toBuffer(), mintKeypair.publicKey.toBuffer()],
    program.programId
  );
  const newMemberTokenAccount = getAssociatedTokenAddressSync(mintKeypair.publicKey, newMember.publicKey, false, TOKEN_2022_PROGRAM_ID)

  before("Fund the users!", async () => {
    await airdrop(provider.connection, newMember.publicKey);
    await airdrop(provider.connection, factionCreator.publicKey);
    // await airdrop(provider.connection, mintKeypair.publicKey);
    const updateAuthority = factionCreator.publicKey;
    // Metadata to store in Mint Account
    const metaData: TokenMetadata = {
      updateAuthority: updateAuthority,
      mint: mintKeypair.publicKey,
      name: "OPOS",
      symbol: "OPOS",
      uri: "https://raw.githubusercontent.com/solana-developers/opos-asset/main/assets/DeveloperPortal/metadata.json",
      additionalMetadata: [["description", "Only Possible On Solana"]],
    };

    // Size of MetadataExtension 2 bytes for type, 2 bytes for length
    const metadataExtension = TYPE_SIZE + LENGTH_SIZE;
    // Size of metadata
    const metadataLen = pack(metaData).length;

    // Size of Mint Account with extension
    const mintLen = getMintLen([ExtensionType.MetadataPointer]);

    // Minimum lamports required for Mint Account
    const lamports = await provider.connection.getMinimumBalanceForRentExemption(
      mintLen + metadataExtension + metadataLen,
    );

    // Instruction to invoke System Program to create new account
    const createAccountInstruction = web3.SystemProgram.createAccount({
      fromPubkey: factionCreator.publicKey, // Account that will transfer lamports to created account
      newAccountPubkey: mintKeypair.publicKey, // Address of the account to create
      space: mintLen, // Amount of bytes to allocate to the created account
      lamports, // Amount of lamports transferred to created account
      programId: TOKEN_2022_PROGRAM_ID, // Program assigned as owner of created account
    });

    // Instruction to initialize the MetadataPointer Extension
    const initializeMetadataPointerInstruction =
      createInitializeMetadataPointerInstruction(
        mintKeypair.publicKey, // Mint Account address
        updateAuthority, // Authority that can set the metadata address
        mintKeypair.publicKey, // Account address that holds the metadata
        TOKEN_2022_PROGRAM_ID,
      );

    // Instruction to initialize Mint Account data
    const initializeMintInstruction = createInitializeMintInstruction(
      mintKeypair.publicKey, // Mint Account Address
      0, // Decimals of Mint
      factionCreator.publicKey, // Designated Mint Authority
      faction, // Optional Freeze Authority
      TOKEN_2022_PROGRAM_ID, // Token Extension Program ID
    );

    // Instruction to initialize Metadata Account data
    const initializeMetadataInstruction = createInitializeInstruction({
      programId: TOKEN_2022_PROGRAM_ID, // Token Extension Program as Metadata Program
      metadata: mintKeypair.publicKey, // Account address that holds the metadata
      updateAuthority: updateAuthority, // Authority that can update the metadata
      mint: mintKeypair.publicKey, // Mint Account address
      mintAuthority: factionCreator.publicKey, // Designated Mint Authority
      name: metaData.name,
      symbol: metaData.symbol,
      uri: metaData.uri,
    });

    // Instruction to update metadata, adding custom field
    const updateFieldInstruction = createUpdateFieldInstruction({
      programId: TOKEN_2022_PROGRAM_ID, // Token Extension Program as Metadata Program
      metadata: mintKeypair.publicKey, // Account address that holds the metadata
      updateAuthority: updateAuthority, // Authority that can update the metadata
      field: metaData.additionalMetadata[0][0], // key
      value: metaData.additionalMetadata[0][1], // value
    });
    const createNewMemberTokenAccount = createAssociatedTokenAccountInstruction(factionCreator.publicKey, newMemberTokenAccount, newMember.publicKey, mintKeypair.publicKey, TOKEN_2022_PROGRAM_ID);

    const mintToInstruction = createMintToCheckedInstruction(mintKeypair.publicKey, newMemberTokenAccount, factionCreator.publicKey, 1, 0, [], TOKEN_2022_PROGRAM_ID);

    const updateAuthorityInstruction = createUpdateAuthorityInstruction({
      metadata: mintKeypair.publicKey,
      newAuthority: faction,
      oldAuthority: factionCreator.publicKey,
      programId: TOKEN_2022_PROGRAM_ID,
    })

    const setAuthorityInstruction = createSetAuthorityInstruction(mintKeypair.publicKey, factionCreator.publicKey, AuthorityType.MintTokens, faction, [], TOKEN_2022_PROGRAM_ID);



    // Add instructions to new transaction
    const transaction = new web3.Transaction().add(
      createAccountInstruction,
      initializeMetadataPointerInstruction,
      // note: the above instructions are required before initializing the mint
      initializeMintInstruction,
      initializeMetadataInstruction,
      updateFieldInstruction,
      createNewMemberTokenAccount,
      mintToInstruction,
      updateAuthorityInstruction,
      setAuthorityInstruction
    );

    // Send transaction
    await web3.sendAndConfirmTransaction(
      provider.connection,
      transaction,
      [factionCreator, mintKeypair], // Signers
      {
        commitment: 'confirmed'
      }
    );


  });

  // it("Initialize the faction", async () => {
  //   await program.methods
  //     .initialize("A TOken", "ATK")
  //     .accounts({
  //       factionCreator: factionCreator.publicKey,
  //       faction: factionAddress,
  //       mint: mintKeypair.publicKey,
  //       systemProgram: web3.SystemProgram.programId,
  //       tokenProgram: TOKEN_2022_PROGRAM_ID
  //     })
  //     .signers([factionCreator, mintKeypair])
  //     .rpc();
  // });

  // it("Obtain token", async () => {
  //   await program.methods.obtainFactionToken().accounts({
  //     factionAuthority: factionCreator.publicKey,
  //     faction: factionAddress,
  //     mint: mintKeypair.publicKey,
  //     newMember: newMember.publicKey,
  //     tokenProgram: TOKEN_2022_PROGRAM_ID,
  //     systemProgram: web3.SystemProgram.programId,
  //     associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
  //     newMemberTokenAccount: getAssociatedTokenAddressSync(mintKeypair.publicKey, newMember.publicKey, false, TOKEN_2022_PROGRAM_ID)
  //   }).signers([factionCreator, newMember]).rpc();
  // });

  it("Show details", async () => {
    await program.methods.showFactionSecret(SECRET).accounts({
      factionMember: newMember.publicKey,
      faction: faction,
      memberTokenAccount: getAssociatedTokenAddressSync(mintKeypair.publicKey, newMember.publicKey, false, TOKEN_2022_PROGRAM_ID),
      mint: mintKeypair.publicKey,
    }).signers([newMember]).rpc();
  })

  // ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
  // | | | | | | | | | | | | | | | | | | | | |
  //           ADD YOUR CODE ABOVE
  // | | | | | | | | | | | | | | | | | | | | |
  // x x x x x x x x x x x x x x x x x x x x x
});

async function airdrop(connection: any, address: any, amount = 10_000_000_000) {
  await connection.confirmTransaction(
    await connection.requestAirdrop(address, amount),
    "confirmed"
  );
}
